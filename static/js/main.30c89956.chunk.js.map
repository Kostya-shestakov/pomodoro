{"version":3,"sources":["PlayButton.js","PauseButton.js","SettingsButton.js","SettingsContext.js","Timer.js","BackButton.js","Settings.js","App.js","reportWebVitals.js","index.js"],"names":["PlayButton","props","xmlns","className","viewBox","fill","fillRule","d","clipRule","PauseButton","SettingsButton","SettingsContext","react","createContext","Timer","settingsInfo","useContext","useState","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","modeRef","useEffect","current","workMinutes","interval","setInterval","nextMode","nextSeconds","breakMinutes","switchMode","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","value","text","styles","buildStyles","textColor","pathColor","tailColor","style","marginTop","onClick","setShowSettings","BackButton","Settings","textAlign","ReactSlider","thumbClassName","trackClassName","onChange","newValue","setWorkMinutes","min","max","setBreakMinutes","App","showSettings","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30c89956.chunk.js","sourcesContent":["function PlayButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PlayButton;","function PauseButton(props) {\r\n  return (\r\n    <button {...props}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PauseButton;","function SettingsButton(props) {\r\n  return (\r\n    <button {...props} className={'with-text'}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n\r\n      Settings\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SettingsButton;","import react from 'react';\r\n\r\nconst SettingsContext = react.createContext({});\r\n\r\nexport default SettingsContext;","import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport PlayButton from \"./PlayButton\";\r\nimport PauseButton from \"./PauseButton\";\r\nimport SettingsButton from \"./SettingsButton\";\r\nimport {useContext, useState, useEffect, useRef} from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\n\r\nconst red = '#f54e4e';\r\nconst green = '#4aec8c';\r\n\r\nfunction Timer() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n\r\n  const [isPaused, setIsPaused] = useState(true);\r\n  const [mode, setMode] = useState('work'); // work/break/null\r\n  const [secondsLeft, setSecondsLeft] = useState(0);\r\n\r\n  const secondsLeftRef = useRef(secondsLeft);\r\n  const isPausedRef = useRef(isPaused);\r\n  const modeRef = useRef(mode);\r\n\r\n  function tick() {\r\n    secondsLeftRef.current--;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    function switchMode() {\r\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\r\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\r\n\r\n      setMode(nextMode);\r\n      modeRef.current = nextMode;\r\n\r\n      setSecondsLeft(nextSeconds);\r\n      secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\r\n    setSecondsLeft(secondsLeftRef.current);\r\n\r\n    const interval = setInterval(() => {\r\n      if (isPausedRef.current) {\r\n        return;\r\n      }\r\n      if (secondsLeftRef.current === 0) {\r\n        return switchMode();\r\n      }\r\n\r\n      tick();\r\n    },1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [settingsInfo]);\r\n\r\n  const totalSeconds = mode === 'work'\r\n    ? settingsInfo.workMinutes * 60\r\n    : settingsInfo.breakMinutes * 60;\r\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\r\n\r\n  const minutes = Math.floor(secondsLeft / 60);\r\n  let seconds = secondsLeft % 60;\r\n  if(seconds < 10) seconds = '0'+seconds;\r\n\r\n  return (\r\n    <div>\r\n      <CircularProgressbar\r\n        value={percentage}\r\n        text={minutes + ':' + seconds}\r\n        styles={buildStyles({\r\n        textColor:'#fff',\r\n        pathColor:mode === 'work' ? red : green,\r\n        tailColor:'rgba(255,255,255,.2)',\r\n      })} />\r\n      <div style={{marginTop:'20px'}}>\r\n        {isPaused\r\n          ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\r\n          : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\r\n      </div>\r\n      <div style={{marginTop:'20px'}}>\r\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;","function BackButton(props) {\r\n  return (\r\n    <button {...props} className={'with-text'}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n      Back\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default BackButton;","import ReactSlider from 'react-slider';\r\nimport './slider.css'\r\nimport SettingsContext from \"./SettingsContext\";\r\nimport {useContext} from \"react\";\r\nimport BackButton from \"./BackButton\";\r\n\r\n\r\nfunction Settings() {\r\n  const settingsInfo = useContext(SettingsContext);\r\n  return(\r\n    <div style={{textAlign:'left'}}>\r\n      <label>work: {settingsInfo.workMinutes}:00</label>\r\n      <ReactSlider\r\n        className={'slider'}\r\n        thumbClassName={'thumb'}\r\n        trackClassName={'track'}\r\n        value={settingsInfo.workMinutes}\r\n        onChange={newValue => settingsInfo.setWorkMinutes(newValue)}\r\n        min={1}\r\n        max={120}\r\n      />\r\n      <label>break: {settingsInfo.breakMinutes}:00</label>\r\n      <ReactSlider\r\n        className={'slider green'}\r\n        thumbClassName={'thumb'}\r\n        trackClassName={'track'}\r\n        value={settingsInfo.breakMinutes}\r\n        onChange={newValue => settingsInfo.setBreakMinutes(newValue)}\r\n        min={1}\r\n        max={120}\r\n      />\r\n      <div style={{textAlign:'center', marginTop:'20px'}}>\r\n        <BackButton onClick={() => settingsInfo.setShowSettings(false)} />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import './App.css';\r\nimport Timer from \"./Timer\";\r\nimport Settings from \"./Settings\";\r\nimport {useState} from \"react\";\r\nimport SettingsContext from \"./SettingsContext\";\r\n\r\nfunction App() {\r\n\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [workMinutes, setWorkMinutes] = useState(45);\r\n  const [breakMinutes, setBreakMinutes] = useState(15);\r\n\r\n  return (\r\n    <main>\r\n      <SettingsContext.Provider value={{\r\n        showSettings,\r\n        setShowSettings,\r\n        workMinutes,\r\n        breakMinutes,\r\n        setWorkMinutes,\r\n        setBreakMinutes,\r\n      }}>\r\n        {showSettings ? <Settings /> : <Timer />}\r\n      </SettingsContext.Provider>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}